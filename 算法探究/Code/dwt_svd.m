
function [watermarked_image, extracted_watermark] = dwt_svd(cover_image,watermark_logo,alpha,attack,param)
%% Watermark embeding using DWT-SVD method

% 1. Apply 1-level Haar wavelet and decompose cover image (C) into four sub-bands:
% LL, HL, LH, and HH
[LL, HL, LH, HH] = dwt2(cover_image, 'haar');


% 2.
H = LL;

% 3. Apply SVD to H (LL) band
[HUw, HSw, HVw] = svd(H, 'econ');

% 4. Apply SVD to watermark logo (W)
[Uw, Sw, Vw] = svd(double(watermark_logo), 'econ');

% 5. Compute an embedded singular value HSw_hat by adding HSw and Sw 
%    with a scaling factor alpha:
HSw_hat = HSw + alpha.*Sw;

% 6. The watermarked sub-band H_hat is generated by using the inverse SVD
H_hat = HUw * HSw_hat * HVw';

% 7
LL_hat = H_hat;

% 8. The watermarked image C is obtained by performing the inverse 1-level DWT.
watermarked_image = idwt2(LL_hat, HL, LH, HH, 'haar');
watermarked_image = uint8(watermarked_image);
%% Attacks
watermarked_image = Attacks(watermarked_image,attack,param);

%% Watermark Extraction DWT-SVD
% 1. The watermarked host image C is decomposed into four
%    sub-bands by 1-level DWT, which include LLw, LHw, HLw, HHw
[LLw, HLw, LHw, HHw] = dwt2(watermarked_image, 'haar');

% 2.
Hw = LLw;

% 3. Apply SVD to Hw
[HUw_hat, HSbw_hat, HVw_hat] = svd(Hw);

% 4. The extracted singular value Sw_hat is gained by:
Sw_hat = (HSbw_hat - HSw)./alpha;

% 5. The extracted watermark w_hat is reconstructed by inverse SVD, which
%    is described by
w_hat = Uw*Sw_hat*Vw';

extracted_watermark =uint8(w_hat);
end

